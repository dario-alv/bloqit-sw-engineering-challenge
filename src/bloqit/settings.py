"""
Django settings for the bloqit project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os

from dotenv import load_dotenv
from importlib.util import find_spec
from os import environ
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Dev note: In my python (and django) setups I like to have the ability to load a `.env` file`. 
# It's really useful for local development. Just make sure the `.gitignore` is correctly set.
# In my current Bubbling setup, I actually created a much more advanced version of a django setup. 
# It allows command line arguments, and loading diff envs from diff files, enabling and disabling parts of the app for debug. 
# It's very useful for development and testing, but extremely overkill for a code challenge.
dotenv_file = BASE_DIR.parent.joinpath('.env')
if dotenv_file.is_file():  # Documentation says this covers both exists() and is_file() since 3.8 where it returns booleans instead of exceptions.
    load_dotenv(dotenv_file)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
# Dev note: In my current Bubbling setup I added some rules to make it so that no one can accidentally
#   run production and DEBUG at the same time. Also not needed for a quick code challenge, 
#   but I'll just leave a note here saying it would be a good idea to always have it.
DEBUG = environ.get('DEBUG', 'false').lower() == 'true'

# Dev note: In a case where I was to deploy this service it would be required to set a host.
# But since the challenge does not account for deployment, I'll assume this is only for local development
# so only these values cover the needs.
ALLOWED_HOSTS = ['localhost', '127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    'backend',                   # Where the non-setup app code is located. 
                                 # Bigger and well managed django services should be split between multiple apps.
                                 # Not really the case for this challenge.  
    'rest_framework',
    'rest_framework.authtoken',  # Not requested by the challenge but I'll will be using token authentication.
    'drf_spectacular'            # Not requested by the challenge, but I really like swagger for api documentation.
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    # 'django.middleware.locale.LocaleMiddleware'  # Dev note: translations is out of scope for this challenge.
                                                   # But regardless I added it already in some parts of the app.
                                                   # Any strings of the format `_('some string')` can have translations applied to them later.
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'bloqit.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'bloqit.wsgi.application'

# Override Django's default User Model (required so that we can use our own custom user model and authentication)
# More info here: https://docs.djangoproject.com/en/4.2/topics/auth/customizing/#substituting-a-custom-user-model
AUTH_USER_MODEL = 'backend.BloqitUser'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases
# Dev note: Basic setup for postgres.
# Not required, using sqlite for this challenge so that we keep dependencies to a bare min.
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.postgresql',
#         'HOST': environ.get('DATABASE_HOST', '127.0.0.1'),
#         'PORT': environ.get('DATABASE_PORT', 5432),
#         'NAME': environ.get('DATABASE_NAME', 'backend'),
#         'USER': environ.get('DATABASE_USER', 'postgres'),
#         'PASSWORD': environ.get('DATABASE_PASSWORD', 'postgres')
#     }
# }
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}


# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


# Django REST framework setup
REST_FRAMEWORK = {
    
    # Security settings:
    'DEFAULT_AUTHENTICATION_CLASSES': (
        # Dev note: using our own class so that we can use the `Bearer` key instead of the `Token` one.
        # Makes it easier to test in Postman as well.
        'backend.authenticators.BearerTokenAuthentication',

        # Dev note: we are opting for the Bearer token authentication scheme for this challenge.
        # As such, I deactivated the other authentication classes. 
        # 'rest_framework.authentication.SessionAuthentication',
        # 'rest_framework.authentication.TokenAuthentication',
        
        # Dev note: deactivated this authentication as well.
        # While it is useful for development and testing, it's not recommended for production. 
        # 'rest_framework.authentication.BasicAuthentication'  
    ),

    'DEFAULT_PERMISSION_CLASSES': (
        'rest_framework.permissions.IsAuthenticated',  # Dev note: Most of the apis will require this permission.
    ),

    # Dev note: these are actually already the defaults for drf.
    # 'DEFAULT_RENDERER_CLASSES': (
    #    'rest_framework.renderers.JSONRenderer',
    #    'rest_framework.renderers.BrowsableAPIRenderer'
    # ),

    # Dev note: also the defaults from drf.
    # 'DEFAULT_PARSER_CLASSES': (
    #    'rest_framework.parsers.JSONParser',
    #    'rest_framework.parsers.FormParser',
    #    'rest_framework.parsers.MultiPartParser'
    # ),

    # Enables drf-spectacular:
    'DEFAULT_SCHEMA_CLASS': 'drf_spectacular.openapi.AutoSchema',
     
    # DEFAULT_THROTTLE_CLASSES:  # Dev note: a sometimes useful setting

    # Pagination:
    # Dev note: was not requested to add this to the challenge, but it's still useful to have.
    # Can also be configured in the view directly, this is just to set a default.
    'DEFAULT_PAGINATION_CLASS': 'rest_framework.pagination.PageNumberPagination',
    'PAGE_SIZE': 40
}


# Cache setup
# see: https://docs.djangoproject.com/en/4.2/ref/settings/#caches
# Dev note: I setup only local memory caching. 
# I would have liked to have added a redis or memcached setup here but it's out of scope.
# Again, trying to keep dependencies to a min so that the challenge is also easier to run and review.
CACHES = {
    'default': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
        'LOCATION': 'local',
        'KEY_PREFIX': 'backend'     # string automatically prepended to all cache keys
        # 'TIMEOUT': 300            # default: 300
    }
}
# CACHE_MIDDLEWARE_ALIAS = 'default'
CACHE_MIDDLEWARE_KEY_PREFIX = 'middleware'
# CACHE_MIDDLEWARE_SECONDS = 600


# Django debug toolbar setup (should only be used if DEBUG is True)
DEBUG_TOOLBAR = False
if DEBUG:
    toolbar_enabled = environ.get('DEBUG_TOOLBAR', 'false').lower() == 'true'
    toolbar_installed = find_spec('debug_toolbar')
    # Dev note: Personal preference to check if optional libraries are available before adding their setups.
    if toolbar_enabled:
        if toolbar_installed:  
            DEBUG_TOOLBAR = True
            INTERNAL_IPS = ['127.0.0.1']
            INSTALLED_APPS.append('debug_toolbar')
            MIDDLEWARE.insert(0, 'debug_toolbar.middleware.DebugToolbarMiddleware')  # Documentation requests that it is added as early as possible.
            DEBUG_TOOLBAR_CONFIG = {
                'DISABLE_PANELS': {'debug_toolbar.panels.redirects.RedirectsPanel'},
                # 'INSERT_BEFORE': '</body>'            # Default: '</body>'
                # 'RENDER_PANELS': None                 # False: panels in memory on the server; True: render per/page
                'SHOW_COLLAPSED': True
                # 'EXTRA_SIGNALS': []                   # Extra signal debugging; Default: []
                # 'ENABLE_STACKTRACES_LOCALS': False    # Heavier stack tracing; Default: False
            }
        else:
            raise ImportError('`django-debug-toolbar` dependency not installed. \
                              Check `setup.cfg` file.')


# Version file for swagger setup
VERSION = 'undefined'
version_file = BASE_DIR.parent.joinpath('VERSION')
if version_file.is_file():  # Documentation says this covers both exists() and is_file() since 3.8 where it returns booleans instead of exceptions.
    try:
        with open(version_file) as file:
            VERSION = file.readline()
    except FileNotFoundError:
        pass  # already have VERSION = 'undefined', at most maybe send a warning here


# Drf swagger setup
SPECTACULAR_SETTINGS = {
    'TITLE': 'Bloqit Code Challenge APIs',
    'DESCRIPTION': 'Code challenge for a python backend developer.',

    # Swagger settings:
    'SERVE_INCLUDE_SCHEMA': False,          # include schema endpoint into schema
    'SCHEMA_PATH_PREFIX': '/',              # regex specifying the denominator for all operation paths
    # 'SCHEMA_PATH_PREFIX_TRIM': False,     # remove SCHEMA_PATH_PREFIX from operation path
    # 'COMPONENT_SPLIT_REQUEST': False,     # split components into request and response parts where appropriate
    # 'COMPONENT_SPLIT_PATCH': True,        # create separate components for PATCH endpoints (without required list)
    # 'SERVE_PUBLIC': True                  # complete public schema or a subset based on the requesting user

    # Security settings:
    # 'SERVE_AUTHENTICATION': True,
    # 'AUTHENTICATION_WHITELIST': ['rest_framework.authentication.BasicAuthentication'],
    # 'RENDERER_WHITELIST': ['rest_framework.renderers.JSONRenderer'],

    # Contacts and service settings:
    'CONTACT': {
        'name': 'Dário Alves',
        'url': 'https://github.com/dario-alv',
        'email': 'dario.alv@ua.pt'
    },
    # 'TAGS': [],                       # tags defined in the global scope
    # 'EXTERNAL_DOCS': {}               # optional: MUST contain 'url', may contain 'description'
    'VERSION': VERSION,                 # set VERSION to None if only the request version should be rendered
    # 'TOS': None,
    'LICENSE': {
        'name': 'Proprietary',          # must always contain at least the `name`
        # 'url': ''                     # optional     
    }
}

# Dev note: missing here (as these are out of scope for the challenge): 
#   1. the setup for HTTPS_ONLY in a production environment.
#   2. Logging setup (I left it to the default django logging setup. 
#   3. Setup for emails so that bugs and error logs in production environments trigger emails to the developer(s).
#   4. Celery setup (not requested at all).
#   5. Redis / Memcached setup (left it as local memory caching)
#   6. Static and Media file setup (STATIC_ROOT, MEDIA_ROOT, MEDIA_URL, etc)
